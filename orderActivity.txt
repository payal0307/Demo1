using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DataAccess
{
    public class orderDA
    {
       

        public bool IsStockAvailable(string stockSymbol)
        {

            using (SqlConnection sqlcon = new SqlConnection(ConfigurationManager.ConnectionStrings["StockConnection"].ToString()))
            {
                string query = "SELECT COUNT(*) FROM Stocks WHERE symbol = @Symbol";
                SqlCommand cmd = new SqlCommand(query, sqlcon);
                
                
                cmd.Parameters.AddWithValue("@Symbol", stockSymbol);
                sqlcon.Open();
                int count = (int)cmd.ExecuteScalar();
                sqlcon.Close();
                return count > 0;
            }
        }

        public bool ExecuteOrder(int userID, string stockSymbol, int quantity, decimal price)
        {
            // Perform necessary validations and checks here
            // For example, check user's balance, available quantity of the stock, etc.

            bool isOrderExecuted = false;

            // If order can be executed, perform necessary database operations
            using (SqlConnection sqlcon = new SqlConnection(ConfigurationManager.ConnectionStrings["StockConnection"].ToString()))
            {
                

                // Insert order into Orders table
                string insertOrderQuery = "INSERT INTO Orders (userID, stockID, orderType, quantity, price, status) " +
                                          "VALUES (@UserID, (SELECT stockID FROM Stocks WHERE symbol = @Symbol), 'Buy', @Quantity, @Price, 'Placed')";
                SqlCommand cmd = new SqlCommand(insertOrderQuery, sqlcon);

                cmd.Parameters.AddWithValue("@UserID", userID);
                cmd.Parameters.AddWithValue("@Symbol", stockSymbol);
                cmd.Parameters.AddWithValue("@Quantity", quantity);
                cmd.Parameters.AddWithValue("@Price", price);
                int rowsAffected = (int)cmd.ExecuteScalar();

                if (rowsAffected > 0)
                {
                    isOrderExecuted = true;

                    // Update user's balance, portfolio, etc. as per your business logic
                    // ...

                    // Update stock's price history, volume, etc. as per your business logic
                    // ...
                }
            }

            return isOrderExecuted;
        }
    }
}
------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace StockMarket.Models
{
    public class Stock
    {
        public int stockID { get; set; }
        public string symbol { get; set; }
        public string stockName { get; set; }
        public string Industry { get; set; }
        public int brokerID { get; set; }
        public decimal Price { get; set; }
        public int quantity { get; set; }
    }
}
----------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace StockMarket.Models
{
    public class User
    {
        public int userID { get; set; }
        public string userName { get; set; }
        public string email { get; set; }
        public decimal balance { get; set; }
        public int brokerID { get; set; }
        public string password { get; set; }
       
    }
}
------------------------------------
<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="WebForm1.aspx.cs" Inherits="StockMarketSystem.WebForm1" %>

<!DOCTYPE html>
<html>
<head>
    <title>Place Order</title>
</head>
<body>
    <form id="form1" runat="server">
        <div>
            <h1>Place Order</h1>

            <asp:Label ID="ErrorMessageLabel" runat="server" ForeColor="Red" Visible="false"></asp:Label>
            <asp:Label ID="SuccessMessageLabel" runat="server" ForeColor="Green" Visible="false"></asp:Label>

            stocksymbol<asp:TextBox ID="StockSymbolTextBox" runat="server"></asp:TextBox>
            <asp:TextBox ID="QuantityTextBox" runat="server"></asp:TextBox>
            <asp:TextBox ID="PriceTextBox" runat="server"></asp:TextBox>

            <asp:Button ID="PlaceOrderButton" runat="server" Text="Place Order" OnClick="PlaceOrderButton_Click" />
        </div>
    </form>
</body>
</html>
---------------------------------------
using DataAccess;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace StockMarketSystem
{
    public partial class WebForm1 : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
        }

        protected void PlaceOrderButton_Click(object sender, EventArgs e)
        {
            string stockSymbol = StockSymbolTextBox.Text;

            int quantity;
            if (!int.TryParse(QuantityTextBox.Text, out quantity))
            {
                ErrorMessageLabel.Text = "Please enter a valid quantity.";
                ErrorMessageLabel.Visible = true;
                return;
            }

            decimal price;
            if (!decimal.TryParse(PriceTextBox.Text, out price))
            {
                ErrorMessageLabel.Text = "Please enter a valid price.";
                ErrorMessageLabel.Visible = true;
                return;
            }

            int userID = GetCurrentUserID(); // Implement a method to get the current user ID

            orderDA dataAccess = new orderDA();

            // Check if the stock is available
            bool isStockAvailable = dataAccess.IsStockAvailable(stockSymbol);

            if (!isStockAvailable)
            {
                ErrorMessageLabel.Text = "The stock is not available for trading.";
                ErrorMessageLabel.Visible = true;
                return;
            }

            // Execute the order
            bool isOrderExecuted = dataAccess.ExecuteOrder(userID, stockSymbol, quantity, price);

            if (!isOrderExecuted)
            {
                ErrorMessageLabel.Text = "The order cannot be executed for some reason.";
                ErrorMessageLabel.Visible = true;
                return;
            }

            SuccessMessageLabel.Text = "Order placed and executed successfully.";
            SuccessMessageLabel.Visible = true;
        }

        private int GetCurrentUserID()
        {
            // Implement the method to get the current user ID
            // ...

            return 1;
        }
    }
}
........................................
namespace DataAccess
{
    public class OrderDA
    {
        private readonly string connectionString;

        public OrderDA(string connectionString)
        {
            this.connectionString = connectionString;
        }

        public bool IsStockAvailable(string stockSymbol)
        {
            // Perform necessary database operations to check if the stock is available
            // ...

            return true; // or false based on the availability of the stock
        }

        public bool ExecuteOrder(int userID, string stockSymbol, int quantity, decimal price)
        {
            // Perform necessary database operations to execute the order
            // ...

            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    connection.Open();

                    // Execute the SQL command to insert the order into the database
                    string sql = "INSERT INTO Orders (UserID, StockSymbol, Quantity, Price) VALUES (@UserID, @StockSymbol, @Quantity, @Price)";
                    using (SqlCommand command = new SqlCommand(sql, connection))
                    {
                        command.Parameters.AddWithValue("@UserID", userID);
                        command.Parameters.AddWithValue("@StockSymbol", stockSymbol);
                        command.Parameters.AddWithValue("@Quantity", quantity);
                        command.Parameters.AddWithValue("@Price", price);

                        int rowsAffected = command.ExecuteNonQuery();

                        return rowsAffected > 0;
                    }
                }
            }
            catch (Exception ex)
            {
                // Handle any exceptions that occur during the database operations
                // ...

                return false;
            }
        }
    }
}---------------------------
namespace WebApplication
{
    public partial class Order : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
        }

        protected void btnPlaceOrder_Click(object sender, EventArgs e)
        {
            int userID = Convert.ToInt32(txtUserID.Text);
            string stockSymbol = txtStockSymbol.Text;
            int quantity = Convert.ToInt32(txtQuantity.Text);
            decimal price = Convert.ToDecimal(txtPrice.Text);

            StockMarketService stockMarketService = new StockMarketService();
            string validationMessage = stockMarketService.PlaceOrder(userID, stockSymbol, quantity, price);

            lblValidationMessage.Text = validationMessage;
        }
    }
}----------------------
<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Order.aspx.cs" Inherits="WebApplication.Order" %>

<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
    <title>Order</title>
</head>
<body>
    <form id="form1" runat="server">
        <div>
            <h1>Place an Order</h1>
            <div>
                <label for="txtUserID">User ID:</label>
                <asp:TextBox ID="txtUserID" runat="server"></asp:TextBox>
            </div>
            <div>
                <label for="txtStockSymbol">Stock Symbol:</label>
                <asp:TextBox ID="txtStockSymbol" runat="server"></asp:TextBox>
            </div>
            <div>
                <label for="txtQuantity">Quantity:</label>
                <asp:TextBox ID="txtQuantity" runat="server"></asp:TextBox>
            </div>
            <div>
                <label for="txtPrice">Price:</label>
                <asp:TextBox ID="txtPrice" runat="server"></asp:TextBox>
            </div>
            <div>
                <asp:Button ID="btnPlaceOrder" runat="server" Text="Place Order" OnClick="btnPlaceOrder_Click" />
            </div>
            <div>
                <asp:Label ID="lblValidationMessage" runat="server"></asp:Label>
            </div>
        </div>
    </form>
</body>
</html>