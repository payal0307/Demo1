using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;

namespace adddemo.Models
{
    public class RepoModel
    {
        public List<MyAdvertiseModel> Advertises()
        {
            List<MyAdvertiseModel> myAdvertiseList = new List<MyAdvertiseModel>();

            using (var con = new SqlConnection(ConfigurationManager.ConnectionStrings["connection"].ToString()))
            {
                try
                {
                    // string query = "GetAdvertiseData2";
                    SqlCommand cmd = new SqlCommand("GetAdvertiseData", con);

                    cmd.CommandType = CommandType.StoredProcedure;

                    con.Open();
                    SqlDataReader reader = cmd.ExecuteReader();

                    while (reader.Read())
                    {
                        MyAdvertiseModel myAdvertise = new MyAdvertiseModel
                        {
                            advertiseId = Convert.ToInt32(reader["advertiseId"]),
                            //  pro=Convert.ToInt32(reader["productCategoryName"]),
                            advertiseTitle = Convert.ToString(reader["advertiseTitle"]),
                            advertiseDescription = Convert.ToString(reader["advertiseDescription"]),
                            advertisePrice = Convert.ToInt32(reader["advertisePrice"]),
                            //areaName=Convert.ToInt32(reader["areaName"]),
                            advertiseStatus = Convert.ToBoolean(reader["advertiseStatus"]),
                            //firstName = Convert.ToString(reader["firstName"]),
                            //advertiseApproved = Convert.ToBoolean(reader["advertiseApproved"])

                        };

                        myAdvertiseList.Add(myAdvertise);
                    }

                    reader.Close();
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Error: " + ex.Message);
                }
            }

            return myAdvertiseList;
        }
        public bool ApproveAdvertisement(int advertiseId)
        {
            try
            {
                using(var con = new SqlConnection(ConfigurationManager.ConnectionStrings["connection"].ToString()))
            {
                    string query = "UPDATE tbl_MyAdvertise SET advertiseStatus = 'Approved' WHERE advertiseId = @advertiseId";
                    SqlCommand cmd = new SqlCommand(query, con);
                    cmd.Parameters.AddWithValue("@advertiseId", advertiseId);

                    con.Open();
                    int rowsAffected = cmd.ExecuteNonQuery();
                    con.Close();

                    return rowsAffected >= 1; // Return true if at least one row was updated
                }
            }
            catch (Exception ex)
            {
                // Handle any exceptions that might occur during the database update
                // Log the exception for debugging and monitoring purposes
                return false; // Return false to indicate a failure
            }
        }
        public bool RejectAdvertisement(int advertiseId)
        {
            try
            {
                using (var con = new SqlConnection(ConfigurationManager.ConnectionStrings["connection"].ToString()))
                {
                    string query = "UPDATE tbl_MyAdvertise SET advertiseStatus = 'Rejected' WHERE advertiseId = @advertiseId";
                    SqlCommand cmd = new SqlCommand(query, con);
                    cmd.Parameters.AddWithValue("@advertiseId", advertiseId);

                    con.Open();
                    int rowsAffected = cmd.ExecuteNonQuery();
                    con.Close();

                    return rowsAffected >= 1;
                }
            }
            catch (Exception ex)
            {
                // Handle any exceptions that might occur during the database update
                // Log the exception for debugging and monitoring purposes
                return false;
            }
        }
        }
}
----------
@model IEnumerable<adddemo.Models.MyAdvertiseModel>

@{
    ViewBag.Title = "Addlist";
}

<!DOCTYPE html>
<html>
<head>
    <title>Addlist</title>
    <link href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
</head>
<body>
    <h2>Addlist</h2>
    <p>
        @Html.ActionLink("Create New", "Create")
    </p>
    <table class="table">
        <thead>
            <tr>
                <th>@Html.DisplayNameFor(model => model.advertiseTitle)</th>
                <th>@Html.DisplayNameFor(model => model.advertiseDescription)</th>
                <th>@Html.DisplayNameFor(model => model.advertisePrice)</th>
                <th>@Html.DisplayNameFor(model => model.advertiseStatus)</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ad in Model)
            {
                <tr>
                    <td>@ad.advertiseTitle</td>
                    <td>@ad.advertiseDescription</td>
                    <td>@ad.advertisePrice</td>
                    <td>
                        <span class="status-text">@ad.advertiseStatus</span>
                        @* Display the status using a <span> element with a class for easy access *@
                    </td>
                    <td>
                       
                            <button type="button" class="btn btn-success approve-button" data-advertise-id="@ad.advertiseId">Approve</button>
                        
                        <button type="button" class="btn btn-danger reject-button" data-advertise-id="@ad.advertiseId">Reject</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var approveButtons = document.querySelectorAll('.approve-button');
            approveButtons.forEach(function (button) {
                button.addEventListener('click', function () {
                    var advertiseId = button.getAttribute('data-advertise-id');
                    var statusElement = button.closest('tr').querySelector('.status-text');

                    setTimeout(function () {
                        statusElement.textContent = 'Approved';

                        // Display a success toast message
                        showToast('Item approved successfully!', 'green');
                    }, 1000); // Simulated delay (replace with your actual AJAX request)
                });
            });

            // Handle Reject button click
            var rejectButtons = document.querySelectorAll('.reject-button');
            rejectButtons.forEach(function (button) {
                button.addEventListener('click', function () {
                    var advertiseId = button.getAttribute('data-advertise-id');
                    var statusElement = button.closest('tr').querySelector('.status-text');

                    setTimeout(function () {
                        statusElement.textContent = 'Rejected';

                        // Display a success toast message
                        showToast('Item rejected successfully!', 'red');
                    }, 1000); // Simulated delay (replace with your actual AJAX request)
                });
            });

            // Helper function to display toast messages
            function showToast(message, backgroundColor) {
                var toast = document.createElement('div');
                toast.textContent = message;
                toast.style.backgroundColor = backgroundColor;
                toast.style.position = 'fixed';
                toast.style.top = '10px';
                toast.style.right = '10px';
                toast.style.padding = '10px';
                toast.style.borderRadius = '5px';
                toast.style.color = 'white';
                toast.style.zIndex = '9999';

                document.body.appendChild(toast);

                setTimeout(function () {
                    document.body.removeChild(toast);
                }, 3000);
            }
        });

    </script>
</body>
</html>
-------using adddemo.Models;
using System;
//using adddemo.Models.demo.Models;
using System.Collections.Generic;
using System.Web.Mvc;

namespace adddemo.Controllers
{
    public class HomeController : Controller
    {
        public ActionResult Index()
        {
            return View();
        }

        public ActionResult About()
        {
            ViewBag.Message = "Your application description page.";

            return View();
        }

        public ActionResult Contact()
        {
            ViewBag.Message = "Your contact page.";
             
            return View();
        }
       
        [HttpGet]
        public ActionResult Addlist()
        {
            RepoModel repo = new RepoModel();
            List<MyAdvertiseModel> advertiseList = repo.Advertises(); 
            return View(advertiseList); 
        }
        [HttpPost]
        public ActionResult ApproveAdvertisement(int advertiseId)
        {

            RepoModel repo = new RepoModel();
            bool isApproved = repo.ApproveAdvertisement(advertiseId);

            if (isApproved)
            {
                TempData["SuccessMessage"] = "Advertisement approved successfully.";
            }
            else
            {
                TempData["ErrorMessage"] = "Failed to approve advertisement.";
            }

            return RedirectToAction("Index");
        }

        [HttpPost]
        public ActionResult RejectAdvertisement(int advertiseId)
        {

            RepoModel repo = new RepoModel();
            bool isRejected = repo.RejectAdvertisement(advertiseId);

            if (isRejected)
            {
                TempData["SuccessMessage"] = "Advertisement rejected successfully.";
            }
            else
            {
                TempData["ErrorMessage"] = "Failed to reject advertisement.";
            }

            return RedirectToAction("Index");
        }

    }
}
 04/10/2023---------------------
@model IEnumerable<demo.Models.MyAdvertise>

@{
    ViewBag.Title = "Addlist";
}
<h2>@ViewBag.SuccessMessage</h2>
<h2>@ViewBag.ErrorMessage</h2>

<!DOCTYPE html>
<html>
<head>
    <title>Addlist</title>
    <link href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
</head>
<body>
    <h2>Addlist</h2>
    <p>
        @Html.ActionLink("Create New", "Create")
    </p>
    <table class="table">
        <thead>
            <tr>
                <th>@Html.DisplayNameFor(model => model.advertiseTitle)</th>
                <th>@Html.DisplayNameFor(model => model.advertiseDescription)</th>
                <th>@Html.DisplayNameFor(model => model.advertisePrice)</th>
                <th>@Html.DisplayNameFor(model => model.advertiseStatus)</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ad in Model)
            {
                <tr>
                    <td>@ad.advertiseTitle</td>
                    <td>@ad.advertiseDescription</td>
                    <td>@ad.advertisePrice</td>
                    <td>
                        @ad.advertiseStatus
                    </td>
                    <td>
                    <td>
                        @*@Html.ActionLink("Approve", "ApproveAdvertise", new { id = ad.advertiseId },
                   htmlAttributes: new { onclick = "return confirm('Are you sure you wish to approve this record?');", @class = "btn btn-success" })
                        @Html.ActionLink("Reject", "RejectAdvertise", new { id = ad.advertiseId },
                  htmlAttributes: new { onclick = "return confirm('Are you sure you wish to reject this record?');", @class = "btn btn-danger" })
                    </td>*@
                    @*<button type="button" onclick="ApproveAdvertise(@ad.advertiseId)" class="btn btn-success approve-button"></button>*@
                    <button type="button" class="btn btn-success approve-button" data-advertise-id="@ad.advertiseId">Approve</button>

                        <button type="button" class="btn btn-danger reject-button" data-advertise-id="@ad.advertiseId">Reject</button>
                        </td>
                </tr>
            }
        </tbody>
    </table>

    <script>
            document.addEventListener('DOMContentLoaded', function () {
                var approveButtons = document.querySelectorAll('.approve-button');
                approveButtons.forEach(function (button) {
                    button.addEventListener('click', function () {
                        var advertiseId = button.getAttribute('data-advertise-id');
                        var statusElement = button.closest('tr').querySelector('.status-text');

                        setTimeout(function () {
                            statusElement.textContent = 'Approved';

                            showToast('Item approved successfully!', 'green');
                        }, 1000);
                    });
                });

                var rejectButtons = document.querySelectorAll('.reject-button');
                rejectButtons.forEach(function (button) {
                    button.addEventListener('click', function () {
                        var advertiseId = button.getAttribute('data-advertise-id');
                        var statusElement = button.closest('tr').querySelector('.status-text');

                        setTimeout(function () {
                            statusElement.textContent = 'Rejected';

                            showToast('Item rejected successfully!', 'red');
                        }, 1000);  });
                });

                function showToast(message, backgroundColor) {
                    var toast = document.createElement('div');
                    toast.textContent = message;
                    toast.style.backgroundColor = backgroundColor;
                    toast.style.position = 'fixed';
                    toast.style.top = '10px';
                    toast.style.right = '10px';
                    toast.style.padding = '10px';
                    toast.style.borderRadius = '5px';
                    toast.style.color = 'white';
                    toast.style.zIndex = '9999';

                    document.body.appendChild(toast);

                    setTimeout(function () {
                        document.body.removeChild(toast);
                    }, 3000);
                }
            });

        </script>
</body>
</html>

   
